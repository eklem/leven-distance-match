var lvm;lvm=(()=>{var r={10:(r,t,e)=>{const o=e(937),n={distance:1};r.exports={levenMatch:function(r,t,e){if(e={...n,...e},Array.isArray(r)&&Array.isArray(t))return r.map((r=>t.filter((t=>o(t,r)<=e.distance))));console.log("query and index should be an array")}}},937:r=>{"use strict";const t=[],e=[],o=(r,o)=>{if(r===o)return 0;const n=r;r.length>o.length&&(r=o,o=n);let a=r.length,s=o.length;for(;a>0&&r.charCodeAt(~-a)===o.charCodeAt(~-s);)a--,s--;let c,l,f,i,u=0;for(;u<a&&r.charCodeAt(u)===o.charCodeAt(u);)u++;if(a-=u,s-=u,0===a)return s;let d=0,h=0;for(;d<a;)e[d]=r.charCodeAt(u+d),t[d]=++d;for(;h<s;)for(c=o.charCodeAt(u+h),f=h++,l=h,d=0;d<a;d++)i=c===e[d]?f:f+1,f=t[d],l=t[d]=f>l?i>l?l+1:i:i>f?f+1:i;return l};r.exports=o,r.exports.default=o}},t={};return function e(o){if(t[o])return t[o].exports;var n=t[o]={exports:{}};return r[o](n,n.exports,e),n.exports}(10)})();